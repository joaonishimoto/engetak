generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String @id @default(uuid())
  email     String @unique
  password  String
  workingOn String @default("")

  points Int  @default(0)
  role   Role @default(MEMBER)

  workDays WorkDay[]

  @@map("users")
}

model Task {
  id     Int    @id @default(autoincrement())
  name   String @unique
  points Int    @default(0)

  @@map("tasks")
}

model Reward {
  id     Int    @id @default(autoincrement())
  name   String @unique
  points Int    @default(0)

  @@map("rewards")
}

model WorkDay {
  id     String   @id @default(uuid())
  day    DateTime
  work   Work[]
  userId String?

  user User? @relation(fields: [userId], references: [id])

  @@map("workdays")
}

model OS {
  id          String  @id @default(uuid())
  name        String  @unique
  description String
  items       Item[]
  Work        Work[]
  Client      Client? @relation(fields: [clientId], references: [id])
  clientId    Int?

  @@map("oses")
}

model Item {
  id          String @id @default(uuid())
  number      Int
  description String
  os          OS     @relation(fields: [osId], references: [id])
  osId        String
  Work        Work[]

  @@map("items")
}

model Work {
  id        String  @id @default(uuid())
  os        OS      @relation(fields: [osId], references: [id])
  osId      String
  item      Item    @relation(fields: [itemId], references: [id])
  itemId    String
  hours     Int
  WorkDay   WorkDay @relation(fields: [workDayId], references: [id])
  workDayId String

  @@map("works")
}

model Client {
  id   Int    @id @default(autoincrement())
  name String
  oses OS[]

  @@map("clients")
}

enum Role {
  MEMBER
  ADMIN

  @@map("role")
}
